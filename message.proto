package bio.motions.format.proto;

message Point {
  optional sint32 x = 1;
  optional sint32 y = 2;
  optional sint32 z = 3;
}

message Callback {
  optional string name = 1;
  enum Type {
    INT = 1;
    DOUBLE = 2;
    INT_LIST = 3;
    DOUBLE_LIST = 4;
  }
  optional Type callback_type = 2;
  optional int32 int_value = 3;
  optional double double_value = 4;
  repeated int32 int_list_value = 5 [packed=true];
  repeated double double_list_value = 6 [packed=true];
}

message Header {
  optional string simulation_name = 1; // jako argument programu
  optional string simulation_description = 2;
  optional int32 binders_types_count = 3;
  // ^number of possible binder types

  repeated string binder_types_names = 6;
  // ^names of binders (in order of their numbers)

  message ChainDescription {
    optional string chain_name = 1;

    message BeadDescription {
      message Binding {
        optional int32 binder_type = 1;
        optional int32 force = 2;
      }
      repeated Binding energy_vector = 1;
    }
    repeated BeadDescription beads = 2; // Ile beads w lancuchu
  }
  repeated ChainDescription chains = 5; // ile lancuchow
  // NEXT_ID=7
}

message Delta { // kolejno wszystkie beads a nastepnie (floating) bindery
  optional Point from = 1; 
  // ^previous position of moved atom

  optional Point disp = 2; // o ile sie przemiescily - (0,0,0) jesli sie nie przemiescil
  // ^displacement vector

  repeated Callback callbacks = 3; // pusty
  optional int64 step_counter = 4; // in which step of the Metropolis algorith something moved  
}

message Keyframe {
  message Binder {
    optional int32 binder_type = 1;
    optional Point position = 2;
  }
  repeated Binder binders = 3; // lista wszystkich floating binderow (laminy tez czy w oddzielnym pliku)

  message Chain {
      repeated Point bead_positions = 1;
  }
  repeated Chain chains = 4;
  repeated Callback callbacks = 5; // pusty
  optional int64 step_counter = 6; // numer kroku (metr_step)
}
